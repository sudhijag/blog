import matplotlib.pyplot as plt

import pandas as pd
import numpy as np

from sklearn import datasets, linear_model
from sklearn.metrics import mean_squared_error, r2_score
from sklearn import metrics

from statsmodels.stats.outliers_influence import variance_inflation_factor
import statsmodels.formula.api as smf

file=pd.read_csv("oilgasdata.csv")
file=file.iloc[::-1]

x= file.drop(columns=["Date"])
y= file["Vol"]

print(y.describe())

"""
plt.boxplot(y)
plt.title("Volume Boxplot")
plt.ylabel("Volume in thousands")
plt.show()
"""

print()

top_whisker = 1023.029
bot_whisker = 165.99

outlier_count=0

#find entries that are outliers
count=0
for i in y:
    if i > top_whisker:
        #x=x.drop([count],axis=0)#remove the outlier
        outlier_count+=1
    elif i < bot_whisker:
        #x=x.drop([count],axis=0)#remove the outlier
        outlier_count+=1
    count += 1
print("OUTLIER COUNT", outlier_count)

#print(x)

y=x["Vol"]

y=np.log10(y)

#Custom function from statsmodels
lm = smf.ols(formula='Vol ~ Open + High + Price + Low + Year + Month + Day + Change', data=x).fit()
print(lm.params)

variables = lm.model.exog

vif = [variance_inflation_factor(variables, i) for i in range(variables.shape[1])]
print("VIF: ", vif)

partition= int(0.2* len(x))
x=x.drop(columns=["Open", "High", "Low", "Vol"])#remove based on multicolinearity

print()
print(x.head())
print()

x_train= x[:-partition]
x_test= x[-partition:]

y_train= y[:-partition]
y_test= y[-partition:]

line = linear_model.LinearRegression()
line.fit(x_train, y_train)

y_pred = line.predict(x_test)


print("Coefficients: Price\tChange\t\tYear\tMonth\t\tDay")
print("\t", line.coef_)


print("\nPerformance of Model:")
print("Mean squared error: %.2f"
      % (mean_squared_error(y_test, y_pred).round(2)))
print('Root Mean Squared Error: %.2f' % (np.sqrt(mean_squared_error(y_test, y_pred))))  
print('Mean Absolute Error: %.2f' % metrics.mean_absolute_error(y_test, y_pred)) 
print('r^2 value: %.2f' % r2_score(y_test, y_pred))

"""
3.Plot
"""

temp=file[-partition:]
temp2=temp["Date"].values

# Plot the actual values
plt.plot(temp['Date'], y_test, 'ko',label="Actual")
# Plot the predicted values
plt.plot(temp['Date'], y_pred, 'ro',label="Predicted")
plt.xticks([0,30,60,90,120],[temp2[0],temp2[30],temp2[60],temp2[90],temp2[120]],rotation = '45'); 

plt.legend()

# Graph labels
plt.ylabel('Log(Volume) in thousands')
